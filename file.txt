abstractpage:
<?php

/**
 * Névtere: App\Html
 * 
 * Az osztályok HTML struktúrákat biztosítanak a REST API ügyfél számára.
 */
namespace App\Html;

use App\Interfaces\PageInterface;

/**
 * Absztrakt osztály: AbstractPage
 * 
 * Alapstruktúrát biztosít az oldalakon a REST API ügyfélben.
 * Tartalmazza a közös HTML komponenseket, például fejléc, navigációs sáv és keresőmező funkciókat.
 */
abstract class AbstractPage implements PageInterface
{
    /**
     * @apiName GenerateHead
     * @apiGroup HTMLComponents
     * @apiDescription Generálja a HTML <head> szekcióját meta tag-ekkel és JavaScript fájlokkal.
     * 
     * @apiSuccess {void} void A fejléc HTML kódjának kiírása sikeres.
     * 
     * @return void
     */
    static function head()
    {
        echo '<!DOCTYPE html>
        <html lang="hu-hu">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <title>REST API Ügyfél</title>
           
            <!-- Script -->
            <script src="js/jquery-3.7.1.js" type="text/javascript"></script>
            <script src="js/app.js" type="text/javascript"></script>
        
        </head>';
    }

    /**
     * @apiName GenerateNav
     * @apiGroup HTMLComponents
     * @apiDescription Generálja a navigációs sávot a Megyék és Városok közötti váltáshoz.
     * 
     * @apiSuccess {void} void A navigációs HTML kód megjelenítése sikeres.
     * 
     * @return void
     */
    static function nav()
    {
        echo '
        <nav>
            <form name="nav" method="post" action="index.php">
                <button type="submit" name="btn-counties">Megyék</button>
                <button type="submit" name="btn-cities">Városok</button>
            </form>
        </nav>';
    }

    /**
     * Absztrakt metódus a táblázat fejléce struktúrájának definiálásához.
     * 
     * @return void
     */
    abstract static function tableHead();

    /**
     * Absztrakt metódus a táblázat törzsének definiálásához az entitások alapján.
     * 
     * @param array $entities Az entitások listája, amelyet meg kell jeleníteni.
     * @return void
     */
    abstract static function tableBody(array $entities);

    /**
     * Absztrakt metódus a teljes táblázat struktúrájának definiálásához.
     * 
     * @param array $entities Az entitások listája, amelyet meg kell jeleníteni.
     * @return void
     */
    abstract static function table(array $entities);

    /**
     * Absztrakt metódus a szerkesztői felület definiálásához.
     * 
     * @return void
     */
    abstract static function editor();

    /**
     * @apiName GenerateSearchBar
     * @apiGroup HTMLComponents
     * @apiDescription Generálja a keresőmezőt a kulcsszavas keresési funkcióhoz.
     * 
     * @apiSuccess {void} void A keresőmező megjelenítése sikeres.
     * 
     * @return void
     */
    static function searchbar()
    {
        echo '
        <form method="post" action="">
            <input type="text" name="keyword">
            <button type="submit" name="btn-search-city" title="Keresés">Keresés</button>
        </form>
        <br>';
    }

    /**
     * @apiName DisplayCountySearchResults
     * @apiGroup SearchResults
     * @apiDescription Megjeleníti a keresési eredményeket táblázatos formában a megyékhez.
     * 
     * @apiParam {Array} results A keresési eredmények.
     * @apiParam {String} keyword A keresési kulcsszó.
     * 
     * @apiSuccess {void} void A keresési eredmények megjelenítése sikeres.
     * @apiError {String} NoResults Nincs találat a megadott kulcsszóra.
     * 
     * @param array $results A keresési eredmények.
     * @param string $keyword A keresési kulcsszó.
     * @return void
     */
    static function displaySearchResults($results, $keyword)
    {
        if (!empty($results)) {
            echo "<table><thead><tr><th>Index</th><th>Név</th><th>Műveletek</th></tr></thead><tbody>";
            
            foreach ($results as $result) {
                echo "
                    <tr>
                        <td>{$result['id']}</td> <!-- Megye azonosítója -->
                        <td>{$result['name']}</td>
                        <td class='flex'>
                            <form method='post' action='' class='inline-form'>
                                <button type='submit' name='btn-edit-county' value='{$result['id']}' title='Módosítás'>Módosítás</button>
                            </form>
                            <form method='post' action=''>
                                <button type='submit' name='btn-del-county' value='{$result['id']}' title='Törlés'>Törlés</button>
                            </form>
                        </td>
                    </tr>";
            }
            echo "</tbody></table>";
        } else {
            echo "<p>Nincs találat a következő keresési kifejezésre: <strong>$keyword</strong></p>";
        }
    }

    /**
     * @apiName DisplayCitySearchResults
     * @apiGroup SearchResults
     * @apiDescription Megjeleníti a városok keresési eredményeit egy táblázatban.
     * 
     * @apiParam {Array} filteredCities A szűrt városok listája.
     * @apiParam {Array} counties A megyék listája a város-megye kapcsolatok feloldásához.
     * 
     * @apiSuccess {void} void A keresési eredmények megjelenítése sikeres.
     * @apiError {String} NoResults Nincs találat a megadott keresési feltétellel.
     * 
     * @param array $filteredCities A szűrt városok listája.
     * @param array $counties A megyék listája a város-megye kapcsolatok feloldásához.
     * @return void
     */
    static function displayCitySearchResults(array $filteredCities, array $counties)
    {
        echo '<h2>Keresési eredmények:</h2>';
        if (!empty($filteredCities)) {
            echo '<table>
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Város</th>
                            <th>Irányítószám</th>
                            <th>Megye</th>
                        </tr>
                    </thead>
                    <tbody>';
            foreach ($filteredCities as $city) {
                $countyName = '';
                foreach ($counties as $county) {
                    if ($county['id'] == $city['id_county']) {
                        $countyName = $county['name'];
                        break;
                    }
                }
                $i = 0; 
                foreach ($filteredCities as $city) {
                    $rowClass = (++$i % 2 === 0) ? "even" : "odd"; 
                    echo "
                        <tr class='{$rowClass}'>
                            <td>{$city['id']}</td>
                            <td>{$city['city']}</td>
                            <td>{$city['zip_code']}</td>
                            <td>{$countyName}</td>
                            <td class='flex'>
                                <form method='post' action='' class='inline-form'>
                                    <input type='hidden' name='id' value='{$city['id']}'>
                                    <button type='submit' name='btn-edit-city' value='{$city['id']}' title='Szerkesztés'>
                                        <i class='fa fa-edit'></i>
                                    </button>
                                </form>
                                <form method='post' action=''>
                                    <button type='submit' name='btn-del-city' value='{$city['id']}' title='Törlés'>
                                        <i class='fa fa-trash'></i>
                                    </button>
                                </form>
                            </td>
                        </tr>";
                }
            }
            echo '</tbody></table>';
        } else {
            echo '<p>Nincs találat a megadott keresési feltétellel.</p>';
        }
    }
}

pagecities.php
<?php

namespace App\Html;

use App\RestApiClient\Client;
use App\Html\Request;

class PageCities
{
    public static function render(array $counties, array $cities = [], ?int $selectedCountyId = null, ?string $filterLetter = null)
    {
        Request::handlePostRequest();
        self::renderSearchCityBar();  

        self::renderForm($counties, $selectedCountyId);

        $filteredCities = Request::filterCitiesByCountyAndLetter($cities, $selectedCountyId, $filterLetter);

        if ($selectedCountyId) {
            self::renderABCSorting($cities, $selectedCountyId);
        }

        self::renderCityList($filteredCities, $selectedCountyId);
    }
    /**
 * @api {post} /search Városok keresése
 * @apiGroup Városkezelés
 * @apiDescription Keresősáv megjelenítése városok kulcsszó szerinti szűréséhez.
 * 
 * @apiParam {String} keyword A keresési kulcsszó, amely alapján a városokat szűrni kell.
 * 
 * @apiSuccess {String} message Jelzi, hogy a keresés sikeres volt.
 * @apiError {String} error Jelzi, hogy probléma történt a keresési funkcióval.
 */
    private static function renderSearchCityBar()
    {
        echo '
        <form method="post" action="">
            <input type="text" name="keyword"/>
            <button type="submit" name="btn-search-city" title="Keresés"></button>
        </form>
        <br>';
    }

    /**
     * @api {post} /counties Megye kiválasztása
     * @apiGroup Megyekezelés
     * @apiDescription Űrlap megjelenítése megyék kiválasztásához.
     * 
     * @apiParam {Array} counties A választható megyék tömbje.
     * @apiParam {Integer} [selectedCountyId] Az éppen kiválasztott megye azonosítója.
     * 
     * @apiSuccess {String} message Jelzi, hogy az űrlap sikeresen megjelent.
     * @apiError {String} error Jelzi, hogy probléma történt az űrlap megjelenítésével.
     */
    private static function renderForm(array $counties, ?int $selectedCountyId)
    {
        $options = self::generateCountyOptions($counties, $selectedCountyId);
        echo '
            <form method="post" action="">
                <label for="county-select">Megyék:</label>
                <select id="county-select" name="selected-county" required>
                    <option value="">Megyék</option>
                    ' . $options . '
                </select>
                <button type="submit" name="btn-show-cities"></button>
            </form>
        ';
    }

    /**
     * @api {post} /cities/sort Városok ábécé szerinti rendezése
     * @apiGroup Városkezelés
     * @apiDescription Ábécé szerinti rendezősáv generálása városok számára.
     * 
     * @apiParam {Array} cities A rendezendő városok tömbje.
     * @apiParam {Integer} selectedCountyId Az éppen kiválasztott megye azonosítója.
     * 
     * @apiSuccess {String} message Jelzi, hogy a rendezősáv sikeresen megjelent.
     * @apiError {String} error Jelzi, hogy probléma történt a rendezősáv megjelenítésével.
     */
    private static function renderABCSorting(array $cities, ?int $selectedCountyId)
    {
        if ($selectedCountyId === null || empty($cities)) {
            return;
        }

        $filteredCities = Request::filterCitiesByCounty($cities, $selectedCountyId);
        $letters = [];
        foreach ($filteredCities as $city) {
            $initial = strtoupper(mb_substr($city['city'], 0, 1));
            if (!in_array($initial, $letters)) {
                $letters[] = $initial;
            }
        }

        sort($letters);

        echo '<div class="abc-sorting">';
        foreach ($letters as $letter) {
            echo "
                <form method='post' action='' style='display:inline;'>
                    <input type='hidden' name='selected-county' value='{$selectedCountyId}'>
                    <input type='hidden' name='filter-letter' value='{$letter}'>
                    <button type='submit' name='btn-filter-letter'>{$letter}</button>
                </form>";
        }
        echo '</div>';
    }

    /**
     * @api {post} /cities/list Városlista megjelenítése
     * @apiGroup Városkezelés
     * @apiDescription A kiválasztott megyéhez tartozó városok listájának megjelenítése.
     * 
     * @apiParam {Array} cities A megjelenítendő városok tömbje.
     * @apiParam {Integer} selectedCountyId Az éppen kiválasztott megye azonosítója.
     * 
     * @apiSuccess {String} message Jelzi, hogy a városlista sikeresen megjelent.
     * @apiError {String} error Jelzi, hogy probléma történt a városlista megjelenítésével.
     */
    public static function renderCityList(array $cities, ?int $selectedCountyId)
    {
        if ($selectedCountyId === null) {
            return;
        }
        echo '
                <h3>Új város hozzáadása:</h3>
                <label for="county-select">Város hozzáadása:</label>
                <form method="post" action="">
                    <input type="text" name="new_city-name" placeholder="Új város" required>
                    <input type="text" name="new_zip-code" placeholder="Új zip kód" required>
                    <input type="hidden" name="selected-county" value="' . $selectedCountyId . '" />
                    <button type="submit" name="btn-save-new-city" title="Mentés">
                        <i class="fa fa-save"></i> Mentés
                    </button>
                </form>
            ';

        if (empty($cities)) {
            echo '<p>Nincsenek városok ehhez a megyéhez.</p>';
            return;
        }

        echo '<table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Irányítószám</th>
                        <th>Város</th>
                        <th>Művelet</th>
                    </tr>
                </thead>
                <tbody>';

        $i = 0; 
        foreach ($cities as $city) {
            $rowClass = (++$i % 2 === 0) ? "even" : "odd"; 
            echo "
                <tr class='{$rowClass}'>
                    <td>{$city['id']}</td>
                    <td>{$city['zip_code']}</td>
                    <td>{$city['city']}</td>
                    <td class='flex'>
                        <form method='post' action='' class='inline-form'>
                            <input type='hidden' name='id' value='{$city['id']}'>
                            <button type='submit' name='btn-edit-city' value='{$city['id']}' title='Szerkesztés'>
                                <i class='fa fa-edit'></i>
                            </button>
                        </form>
                        <form method='post' action=''>
                            <button type='submit' name='btn-del-city' value='{$city['id']}' title='Törlés'>
                                <i class='fa fa-trash'></i>
                            </button>
                        </form>
                    </td>
                </tr>";
        }

        echo '</tbody></table>';
    }
    static function displayEditForm(array $city, array $counties)
    {
        echo "
        <h2>Város szerkesztése</h2>
        <form method='post' action=''>
            <input type='hidden' name='city_id' value='{$city['id']}' />
            <label for='city_name'>Város neve:</label>
            <input type='text' name='city_name' id='city_name' value='{$city['city']}' required />
            
            <label for='zip_code'>Irányítószám:</label>
            <input type='text' name='zip_code' id='zip_code' value='{$city['zip_code']}' required />
            
            <label for='county_id'>Megye:</label>
            <select name='county_id' id='county_id' required>";
            
        foreach ($counties as $county) {
            $selected = $county['id'] == $city['id_county'] ? 'selected' : '';
            echo "<option value='{$county['id']}' $selected>{$county['name']}</option>";
        }
    
        echo "
            </select>
            <button type='submit' name='btn-save-edit-city'>Mentés</button>
        </form>";
    } 
}

request
<?php

namespace App\Html;

//use App\Pdf\Pdf;
use App\RestApiClient\Client;
use App\Interfaces\PageInterface;
use App\Html\AbstractPage;
//use PHPMailer\PHPMailer\PHPMailer;
//use PHPMailer\PHPMailer\Exception;
class Request {

    /**
     * @api {post} /request POST kérések kezelése
     * @apiName HandleRequest
     * @apiGroup Request
     * @apiDescription Ez a végpont különböző POST kéréseket kezel, mint például megyék mentése, törlése, szerkesztése, keresése és városok kezelése.
     * 
     * @apiSuccess {String} message A művelet sikerének üzenete.
     * @apiError {String} error Hibaüzenet, ha a művelet nem sikerült.
     */
    static function handle()
    {
        switch ($_SERVER["REQUEST_METHOD"]){
            case "POST":
                self::postRequest();
                break;
        }
    }

    /**
     * @api {post} /request/btn-save-new-county Új megye mentése
     * @apiName SaveNewCounty
     * @apiGroup Request
     * @apiDescription Ez a végpont lehetővé teszi egy új megye mentését a megye nevének megadásával.
     *
     * @apiParam {String} new_name Az új megye neve, amelyet el szeretnénk menteni.
     *
     * @apiSuccess {String} message "A város sikeresen hozzáadva!" - A város sikeresen hozzáadva.
     * @apiError {String} error "Hiba történt a mentés során!" - Hiba a város mentése közben.
     */
    private static function postRequest()
    {
        $request = $_REQUEST;

        switch ($request) {
            case isset($request['btn-home']):
                break;

            case isset($request['btn-counties']):
                PageCounties::table(self::getCounties());
                break;

            case isset($request['btn-save-county']):
                $client = new Client();
                if (!empty($request['id'])) {
                    $data['id'] = $request['id'];
                }
                break;

            /**
             * @api {delete} /request/btn-del-county Megye törlése
             * @apiName DeleteCounty
             * @apiGroup Request
             * @apiDescription Ez a végpont törli a megyét a megadott megye ID alapján.
             *
             * @apiParam {Number} id A törlendő megye ID-ja.
             *
             * @apiSuccess {String} message "Sikeres törlés!" - A megye sikeresen törölve.
             * @apiError {String} error Hibaüzenet, ha a törlés nem sikerült.
             */
            case isset($request['btn-del-county']):
                $id = $request['btn-del-county'];
                $client = new Client();
                $response = $client->delete('counties/' . $id, $id);
                if ($response && isset($response['success']) && $response['success']) {
                    echo "Sikeres törlés!";
                } 
                
                PageCounties::table(self::getCounties());
                break;
            
            /**
             * @api {post} /request/btn-search Megye keresése név alapján
             * @apiName SearchCounties
             * @apiGroup Request
             * @apiDescription Ez a végpont lehetővé teszi megyék keresését név alapján egy kulcsszó segítségével.
             *
             * @apiParam {String} keyword A keresési kulcsszó a megyék neveihez.
             *
             * @apiSuccess {Object[]} results A keresési kulcsszónak megfelelő megyék listája.
             * @apiError {String} error "Nincs találat!" - Nincs találat.
             */
            case isset($request['btn-search']):
                $keyword = $_POST['keyword'];
                $results = self::searchCountiesByName($keyword);
                echo "<h2>Keresési eredmények:</h2>";
                AbstractPage::searchbar(); 
                AbstractPage::displaySearchResults($results, $keyword);
                break;
               
            /**
             * @api {put} /request/btn-save-edit-county Megye adatainak módosítása
             * @apiName SaveEditCounty
             * @apiGroup Request
             * @apiDescription Ez a végpont lehetővé teszi egy meglévő megye nevének módosítását.
             *
             * @apiParam {Number} id A módosítandó megye ID-ja.
             * @apiParam {String} edit_name Az új megye név.
             *
             * @apiSuccess {String} message "A név sikeresen módosítva lett!" - A név sikeresen módosítva.
             * @apiError {String} error Hibaüzenet, ha a módosítás nem sikerült.
             */
            case isset($request['btn-save-edit-county']):
                        $id = $request['id'];
                        $newName = $request['edit_name'];
                        $client = new Client();
                        
                        $response = $client->put('counties/' . $id, ['name' => $newName]);
                        
                        if ($response && isset($response['success']) && $response['success']) {
                            echo "A név sikeresen módosítva lett!";
                        } else {
                            //echo "Hiba történt a módosítás során!";
                        }
                        
                        PageCounties::table(self::getCounties());
                        break;

            /**
             * @api {post} /request/btn-show-cities Városok megjelenítése egy megye alapján
             * @apiName ShowCities
             * @apiGroup Request
             * @apiDescription Ez a végpont minden várost lekér és megjelenít, amely egy adott megyéhez tartozik.
             *
             * @apiParam {Number} selected-county A kiválasztott megye ID-ja.
             *
             * @apiSuccess {Object[]} cities A kiválasztott megyéhez tartozó városok listája.
             * @apiError {String} error "Hiba történt a városok megjelenítésekor!" - Hiba a városok megjelenítésekor.
             */
            case isset($request['btn-show-cities']):
                            self::handleShowCities($request);
                            break;
            
            /**
             * @api {post} /request/btn-save-new-city Új város mentése
             * @apiName SaveNewCity
             * @apiGroup Request
             * @apiDescription Ez a végpont új város mentését teszi lehetővé egy kiválasztott megye alatt.
             *
             * @apiParam {String} new_city-name Az új város neve.
             * @apiParam {String} new_zip-code Az új város irányítószáma.
             * @apiParam {Number} selected-county A megye ID-ja, amelyhez a város tartozik.
             *
             * @apiSuccess {String} message "Új város hozzáadva!" - Az új város sikeresen hozzáadva.
             * @apiError {String} error "Kérem, töltse ki az összes mezőt!" - Kérjük, töltse ki az összes mezőt.
             */
            case isset($request['btn-save-new-city']):
                            self::handleNewCityRequest($request);
                            break;
            
            /**
             * @api {delete} /request/btn-del-city Város törlése
             * @apiName DeleteCity
             * @apiGroup Request
             * @apiDescription Ez a végpont törli a várost a megadott város ID alapján.
             *
             * @apiParam {Number} id A törlendő város ID-ja.
             *
             * @apiSuccess {String} message "A város sikeresen törölve!" - A város sikeresen törölve.
             * @apiError {String} error Hibaüzenet, ha a törlés nem sikerült.
             */
            case isset($request['btn-del-city']):
                            self::handleCityDeletion($request);
                            break;
            
            /**
             * @api {post} /request/btn-search-city Városok keresése név alapján
             * @apiName SearchCity
             * @apiGroup Request
             * @apiDescription Ez a végpont lehetővé teszi városok keresését név alapján egy kulcsszó segítségével.
             *
             * @apiParam {String} keyword A keresési kulcsszó a városok neveihez.
             *
             * @apiSuccess {Object[]} results A keresési kulcsszónak megfelelő városok listája.
             * @apiError {String} error "Nincs találat!" - Nincs találat.
             */
            case isset($request['btn-search-city']):
                            self::handleCitySearch($request['keyword']);
                            break;

            /**
             * @api {put} /request/btn-save-edit-city Város adatainak módosítása
             * @apiName EditCity
             * @apiGroup Request
             * @apiDescription Ez a végpont lehetővé teszi egy város adatainak, például a név, irányítószám, megye módosítását.
             *
             * @apiParam {Number} city_id A módosítandó város ID-ja.
             * @apiParam {String} city_name Az új város név.
             * @apiParam {String} zip_code Az új irányítószám.
             * @apiParam {Number} county_id Az új megye ID-ja.
             *
             * @apiSuccess {String} message "A város adatai sikeresen módosítva lettek!" - A város adatai sikeresen módosítva.
             * @apiError {String} error Hibaüzenet, ha a módosítás nem sikerült.
             */
            case isset($request['btn-save-edit-city']):
                            self::handleSaveEditCity($request);
                            break;
                        default:
                             $counties = self::getCounties();
                              PageCities::render($counties);
                            break;            
        }
    }

    private static function getCounties() : array
    {
        $client = new Client();
        $response = $client->get('counties');
 
        return $response['data'];
    }

    /**
     * @api {post} /request/btn-save-new-city Új város mentése
     * @apiName SaveNewCity
     * @apiGroup Request
     * @apiDescription Ez a végpont új város mentését teszi lehetővé egy kiválasztott megye alatt.
     *
     * @apiParam {String} new_city-name Az új város neve.
     * @apiParam {String} new_zip-code Az új város irányítószáma.
     * @apiParam {Number} selected-county A megye ID-ja, amelyhez a város tartozik.
     *
     * @apiSuccess {String} message "Új város hozzáadva!" - Az új város sikeresen hozzáadva.
     * @apiError {String} error "Kérem, töltse ki az összes mezőt!" - Kérjük, töltse ki az összes mezőt.
     */
    static function searchCountiesByName($keyword)
    {
        $client = new Client();
        $counties = $client->get('counties');
        
        $results = [];
        foreach ($counties['data'] as $county) {
            if (stripos($county['name'], $keyword) !== false) {
                $results[] = $county;
            }
        }
        
        return $results;
    }
    private static function getCities(): array
    {
        $client = new Client();
        $response = $client->get('cities');

        return $response['data'] ?? [];
    }
    
    private static function handleCityDeletion($request): void
    {
        $id = $request['btn-del-city'];
        $client = new Client();
        $response = $client->delete('cities/' . $id, $id);
        if ($response && isset($response['success']) && $response['success']) {
            echo "A város sikeresen törölve!";
        }
        PageCities::render(self::getCities());
    }

    private static function handleCitySearch($keyword)
    {
        $client = new Client();
        $cities = $client->get('cities'); 
        $counties = $client->get('counties'); 
    
        $filteredCities = array_filter($cities['data'], function ($city) use ($keyword) {
            return stripos($city['city'], $keyword) !== false;
        });
    
        AbstractPage::displayCitySearchResults($filteredCities, $counties['data']);
    }

    private static function handleSaveEditCity($request)
    {
        $cityId = $request['city_id'];
        $updatedName = $request['city_name'];
        $updatedZipCode = $request['zip_code'];
        $updatedCountyId = $request['county_id'];

        $client = new Client();
        $response = $client->put("cities/$cityId", [
            'city' => $updatedName,
            'zip_code' => $updatedZipCode,
            'id_county' => $updatedCountyId
        ]);

        if ($response && isset($response['success']) && $response['success']) {
            echo "A város adatai sikeresen módosítva lettek!";
        }
        $counties = self::getCounties();
        $cities = self::getCities();
        PageCities::render($counties, $cities, $updatedCountyId);
    }

    private static function handleEditCity($request)
    {
        $cityId = $request['btn-edit-city'];
        $client = new Client();

        $city = $client->get("cities/$cityId");
        $counties = self::getCounties();

        if ($city && isset($city['data'])) {
            PageCities::displayEditForm($city['data'], $counties); 
        } 
    }

    private static function handleShowCities($request)
    {
        $selectedCountyId = !empty($request['selected-county']) ? intval($request['selected-county']) : null;
    
        $counties = self::getCounties();
        $cities = self::getCities();
    
        PageCities::render($counties, $cities, $selectedCountyId);
    }

    private static function handleFilterLetter($request)
    {
        $selectedCountyId = !empty($request['selected-county']) ? intval($request['selected-county']) : null;
        $filterLetter = !empty($request['filter-letter']) ? strtoupper($request['filter-letter']) : null;

        $counties = self::getCounties();
        $cities = self::getCities();

        PageCities::render($counties, $cities, $selectedCountyId, $filterLetter);
    }
}
